#!/usr/bin/perl -w
#
# frontend-term - keybinding frontend to omxplayer-console
# Copyright (C) 2013 Christian Garbs <mitch@cgarbs.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use Term::ReadKey;


# set this to true to show unknown key sequences
my $learning_mode = 0;

#################################

my %escapes = (
    'A' => 'up',
    'B' => 'down',
    'C' => 'right',
    'D' => 'left',
    );

my %keys = (
    'q' => 'quit',
    "\n" => 'play',
    ' ' => 'stop',
    'f' => 'seek +20',
    'F' => 'seek +100',
    'r' => 'seek -20',
    'R' => 'seek -100',
    'p' => 'pause',
    '+' => 'volume +10',
    '-' => 'volume -10',
    'a' => 'audio',
    's' => 'subtitle',
    'S' => 'nosub ',
    'd' => 'subdelay+250',
    'D' => 'subdelay-250',
    'i' => 'info',
    );

#################################

ReadMode 'cbreak';

my $esc = chr(27);
my $seq = '';

$|++;

while (1) {

    my $key = ReadKey(-1);
    next unless defined $key;
	
    # build ESC sequences
    if ($seq eq '' and $key eq $esc) {
	$seq = $key;
    }
    elsif ($seq eq $esc and $key eq '[') {
	$seq .= $key;
    }
    # parse ESC sequences
    elsif ($seq eq $esc.'[') {
	$seq = '';
	if (exists $escapes{$key}) {
	    print "$escapes{$key}\n";
	} elsif ($learning_mode) {
	    printf "ESC[ %03d=(%s)\n", ord($key), $key ;
	}
    }
    # normal characters, reset sequence
    else {
	$seq = '';
	
	if (exists $keys{$key}) {
	    print "$keys{$key}\n";
	} elsif ($learning_mode) {
	    printf "%03d=(%s)\n", ord($key), $key;
	}
    
	# this has to be treated special -> loop end
	if ($key eq 'q') {
	    last;
	}
    }

}

ReadMode 'restore';

