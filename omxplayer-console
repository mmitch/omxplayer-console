#!/usr/bin/perl -w
use strict;

use IPC::Open2;
use Term::ANSIColor;
use POSIX qw(mkfifo);
use File::Which;

# configuration
my $startdir = "$ENV{HOME}/media";

my $omxplayer_regexp = qr/\.(264|avi|bin|divx|f4v|h264|m4e|m4v|m4a|mkv|mov|mp4|mp4v|mpe|mpeg|mpeg4|mpg|mpg2|mpv|mpv2|mqv|mvp|ogm|ogv|qt|qtm|rm|rts|scm|scn|smk|swf|vob|wmv|xvid|x264|mp3|flac|ogg|wav|flv|mkv)$/;
my $omxplayer_fifo = '/tmp/omxplayer-console.omxplayer.fifo';
my @omxplayer_exec = ('omxplayer', '-o', 'hdmi', '%FILES%');
my $omxplayer_kill = 'killall -e omxplayer.bin';
# omxplayer hotkeys at
# http://elinux.org/Omxplayer

my $mplayer_regexp        = qr/\.(264|avi|bin|divx|f4v|h264|m4e|m4v|m4a|mkv|mov|mp4|mp4v|mpe|mpeg|mpeg4|mpg|mpg2|mpv|mpv2|mqv|mvp|ogm|ogv|qt|qtm|rm|rts|scm|scn|smk|swf|vob|wmv|xvid|x264|mp3|flac|ogg|wav|flv|mkv)$/;
my $mplayer_regexp_stream = qr/\.(webradio)$/;
my $mplayer_fifo = '/tmp/omxplayer-console.mplayer.fifo';
my @mplayer_exec = ('mplayer', '-slave', '-quiet', '-input', "file=${mplayer_fifo}", '%FILES%');
# see mplayer slave mode documentation at
# http://www.mplayerhq.hu/DOCS/tech/slave.txt


# global variables
my $win;
my $dir;
my @filelist;
my $sel;
my @dirstack;
my $ypos;
my $visible = 1;

my $omxplayer_active = 0;
my $mplayer_pid = 0;

# cache clear screen sequence
my $cls = `clear`;

# cache IP address
my $ip_cache = '';
my $ip_cache_time = 0;

# do this once, console terminals don't resize often
my $screen_w = 0 + `tput cols`;
my $screen_h = 0 + `tput lines`;

# handle forks in *player_send()
use POSIX ":sys_wait_h";
sub REAPER {
    my $child;
    # If a second child dies while in the signal handler caused by the
    # first death, we won't get another signal. So must loop here else
    # we will leave the unreaped child as a zombie. And the next time
    # two children die we get another zombie. And so on.
    while (($child = waitpid(-1,WNOHANG)) > 0) {
    }
    $SIG{CHLD} = \&REAPER;  # still loathe SysV
}
$SIG{CHLD} = \&REAPER;

sub get_ip_real()
{				  
    my $ip = '';
    open IP, 'ip addr |' or return $ip;
    while (my $line = <IP>) {
	if ($line =~ m,inet ([.0-9]+)/,) {
	    $ip = $1;
	}
    }
    close IP;
    return $ip;
}

sub get_ip_cached()
{
    # 5 minute cache
    if (time() - $ip_cache_time > 300) {
	$ip_cache_time = time();
	$ip_cache = get_ip_real();
    }
    return $ip_cache;
}

sub clear_screen()
{
    print $cls;
    $ypos = 1; # don't use last line on screen
}

sub mplayer_stop()
{
    return unless $mplayer_pid;

    mplayer_send('stop');
    kill 15, $mplayer_pid;
    waitpid( $mplayer_pid, 0 );
    $mplayer_pid = 0;
}

sub omxplayer_stop()
{
    return unless $omxplayer_active;
    omxplayer_send('q');
    `${omxplayer_kill}`;
    $omxplayer_active = 0;
}

sub mplayer_send($)
{
    return unless $mplayer_pid;
    if ( kill(0, $mplayer_pid) == 0) {
	$mplayer_pid = 0;
	return;
    };

    my $child = fork();
    die 'fork() unsuccessful in mplayer_send()' unless defined $child;
    if ($child == 0) {
	# child
	open  FIFO, '>', $mplayer_fifo or die "can't open fifo `$mplayer_fifo': $!";
	print FIFO "$_[0]\n";
	close FIFO or die "can't close fifo `$mplayer_fifo': $!";
	exit 0;
    }
}

sub omxplayer_send($)
{
    return unless $omxplayer_active;

    my $child = fork();
    die 'fork() unsuccessful in omxplayer_send()' unless defined $child;
    if ($child == 0) {
	# child
	open  FIFO, '>', $omxplayer_fifo or die "can't open fifo `$omxplayer_fifo': $!";
	print FIFO "$_[0]";
	close FIFO or die "can't close fifo `$omxplayer_fifo': $!";
	exit 0;
    }
}

sub stop_all()
{
    mplayer_stop();
    omxplayer_stop();
    $visible = 1;
}

sub omxplayer_start(@)
{
    stop_all();

    $visible = 0;
    clear_screen();

    my $omxplayer_pid = fork();
    die 'fork() unsuccessful in omxplayer_start()' unless defined $omxplayer_pid;

    if ($omxplayer_pid == 0) {
	# child

	open(STDIN, '<', $omxplayer_fifo) or die "can't reopen stdin from `$omxplayer_fifo': $!";
	close STDOUT;
	close STDERR;

	my @exec = ();
	foreach my $part (@omxplayer_exec) {
	    if ($part eq '%FILES%') {
		push @exec, @_;
	    } else {
		push @exec, $part;
	    }
	}

	exec(@exec);
	# gone, we are omxplayer now
	die 'exec() did not happen in omxplayer_start()';
	
    } 

    $omxplayer_active = 1;
    omxplayer_send('.');

}

sub mplayer_start(@)
{
    stop_all();

    $visible = 0;
    clear_screen();

    $mplayer_pid = fork();
    die 'fork() unsuccessful in mplayer_start()' unless defined $mplayer_pid;

    if ($mplayer_pid == 0) {
	# child

	close STDIN;
#	close STDOUT; # mplayer plays no streams when stdout is closed?!
	open(STDOUT, '>', '/dev/null') or die "can't reopen stdout to `/dev/null': $!";
	close STDERR;

	my @exec = ();
	foreach my $part (@mplayer_exec) {
	    if ($part eq '%FILES%') {
		push @exec, @_;
	    } else {
		push @exec, $part;
	    }
	}

	exec(@exec);
	# gone, we are mplayer now
	die 'exec() did not happen in mplayer_start()';
	
    }

}

sub mplayer_start_stream($)
{
    my $playlist = shift;

    open PLAYLIST, '<', $playlist or die "can't open `$playlist': $!";
    my $line = <PLAYLIST>;
    close PLAYLIST or die "can't close `$playlist': $!";

    chomp $line;

    # this is taken from jamirdochegal:
    if ($line =~ /^(?:\s*(\S+)\|)?(.*)\s+(\S+)\s*$/) {
        my ($shortcut, $name, $url, $flags) = ($1, $2, $3, {});

        while ($url =~ s/^([A-Z]+)://g) {
            $flags->{$1}++;
        }

	my @parms = ( '-cache', '128' );
	push @parms, ('-demuxer', 'ogg') if exists $flags->{OGGDEMUX};
	push @parms, '-playlist' unless exists $flags->{DIRECT};

	mplayer_start( @parms, $url );
	$visible = 1;
    }

}

sub print_big($)
{
    my $text = shift;

    my ($stdin, $stdout);
    my $pid = open2(
	$stdout,
	$stdin,
        "figlet -w $screen_w -f mini -k"
#	'figlet -t -f mini -k'
#	'figlet -t -f small -W'
#	'figlet -t -f small'
	);

    my $ret;

    print $stdin "$text\n";
    close $stdin;

    while (my $line = <$stdout>) {
	$ypos++;
	print $line;
    }
    close $stdout;

    waitpid( $pid, 0 );

    return $ret;
}

sub show_dir()
{
    print color 'white';
    print_big($dir);
    print color 'reset';
}    

sub show_file()
{
    if ($sel >= 0) {
	my $file = $filelist[$sel];
	if ($file->{TYPE} eq 'd') {
	    print color 'bold white';
	} else {
	    print color 'bold green';
	}
	print_big($file->{NAME});
	print color 'reset';
    } else {
	print_big('');
    }
}    

sub show_filelist()
{

    my $start = 0;
    my $end = @filelist;

    my $lines_left = $screen_h - $ypos - 2;
    if ($lines_left < @filelist) {
	$start = $sel - int($lines_left/2);
	if ($start < 0) {
	    $start = 0;
	}
	$end = $start + $lines_left;
	if ($end > @filelist) {
	    $end = @filelist;
	    $start = $end - $lines_left;
	}
    }

    if ($start > 0) {
	print colored('       -^-^-^-^-^-^-^-^-', 'bold yellow') . "\n";
    } else {
	print "\n";
    }
	    
    my $pos = 0;
    foreach my $file (@filelist) {

	unless ($pos < $start) {

	    my $filefg = $file->{TYPE} eq 'f' ? 'bold green' : 'bold white';
	    my $filebg = $pos == $sel ? 'on_red' : '';
	
	    printf("   %s %s\n",
		   $pos == $sel ? colored('==>', 'bold yellow') : '   ',
		   colored($file->{DISPLAY}, "$filefg $filebg")
		);
	}	

	$pos++;

	last if $pos == $end;
    }

    if ($end < @filelist) {
	print colored('       -v-v-v-v-v-v-v-v-', 'bold yellow') . "\n";
    } else {
	print "\n";
    }
}

sub read_directory($)
{
    my $dir = shift;
    my @files;

    opendir DIR, $dir or die "can't opendir `$dir': $!";
    while (my $file = readdir(DIR)) {
	next if $file =~ /^\./;
	my $fullname = $dir.'/'.$file;
	if (-f $fullname) {
	    push @files, {
		TYPE => 'f',
		NAME => $file,
		FULLNAME => $fullname,
		DIR => $dir,
		DISPLAY => " $file "
	    }
	} elsif (-d _) {
	    push @files, {
		TYPE => 'd',
		NAME => $file,
		FULLNAME => $fullname,
		DIR => $dir,
		DISPLAY => "[$file]"
	    }
	}
    }
    closedir DIR or die "can't closedir `$dir': $!";

    @files = sort { $a->{TYPE} cmp $b->{TYPE}
		    ||
			$a->{NAME} cmp $b->{NAME} } @files;

    return @files;
}

sub change_directory($)
{
    my $newdir = shift;

    if (substr($newdir, 0, length ($startdir)) eq $startdir) {
	$dir = $newdir;
	@filelist = read_directory($newdir);
	$sel = @filelist ? 0 : -1;
    }
}

sub show_statusbar()
{

    my (undef, $min, $hour, undef) = localtime(time);

    print colored(
	sprintf("%02d:%02d - raspberry pi videostation - %s ",
		$hour,
		$min,
		get_ip_cached()
	),
	'cyan') . "\n";

    $ypos++;
}

sub draw_screen()
{
    clear_screen();
    if ($visible) {
	show_statusbar();
	show_dir();
	show_file();
	show_filelist();
    }
}

#### initialize other stuff

# check for binaries and initialize FIFOs
if (defined which('omxplayer') and defined which('omxplayer.bin')) {
    (-p $omxplayer_fifo) or mkfifo($omxplayer_fifo, 0700) or die "can't mkfifo `$omxplayer_fifo': $!";
} else {
    $omxplayer_regexp = undef;
}
if (defined which('mplayer')) {
    (-p $mplayer_fifo) or mkfifo($mplayer_fifo, 0700) or die "can't mkfifo `$mplayer_fifo': $!";
} else {
    $mplayer_regexp = undef;
    $mplayer_regexp_stream = undef;
}

# parse commandline arguments
if (defined $ARGV[0]) {
    $startdir = $ARGV[0];
}

# startup
change_directory($startdir);

### TODO:
### put commands in a hash
### give default values for $arg
while (1) {
    draw_screen();

    my $input = <>;
    next unless defined $input;

    chomp $input;

    next unless $input =~ m/^(.*?)\s*([-+0-9]*)$/;
    my ($cmd, $arg) = ($1, $2);

    if ($cmd eq 'up') {
	$arg = 1 unless $arg;
	$sel -= $arg;
	if ($sel < 0) {
	    $sel = 0;
	}
    }
    elsif ($cmd eq 'down') {
	$arg = 1 unless $arg;
	$sel += $arg;
	if ($sel >= @filelist) {
	    $sel = @filelist - 1;
	}
    }
    elsif ($cmd eq 'quit') {
	stop_all();
	last;
    }
    elsif ($cmd eq 'left') {
	if (length $dir > length $startdir) {
	    my $newdir = $dir;
	    $newdir =~ s,/[^/]*$,,;
	    change_directory($newdir);
	    if (@dirstack) {
		$sel = pop @dirstack;
		if ($sel >= @filelist) {
		    $sel = @filelist - 1;
		}
	    }
	}
    }
    elsif ($cmd eq 'right') {
	if ($sel >= 0) {
	    my $file = $filelist[$sel];
	    if ($file->{TYPE} eq 'd') {
		push @dirstack, $sel;
		change_directory($file->{FULLNAME});
	    }
	}
    }
    elsif ($cmd eq 'info') {
	mplayer_send('osd_show_progression');
	omxplayer_send('z');
    }
    elsif ($cmd eq 'audio') {
	mplayer_send('switch_audio');
	omxplayer_send('k');
    }
    elsif ($cmd eq 'subtitle') {
	mplayer_send('sub_select');
	omxplayer_send('m');
    }
    elsif ($cmd eq 'subdelay') {
	$arg = 0 unless $arg;

	mplayer_send("sub_delay " . ($arg / 1000));

	# omxplayer can only change delay by 250ms
	if ($arg < 0) {
	    omxplayer_send('d');
	} elsif ($arg > 0) {
	    omxplayer_send('f');
	}

    }
    elsif ($cmd eq 'volume') {
	$arg = 0 unless $arg;

	mplayer_send("volume $arg");

	# omxplayer tages no argument
	if ($arg < 0) {
	    omxplayer_send('-');
	} elsif ($arg > 0) {
	    omxplayer_send('+');
	}
	
    }
    elsif ($cmd eq 'seek') {
	$arg = 0 unless $arg;

	mplayer_send("seek $arg 0");

	# omxplayer can only seek +-30 and +.600 seconds O_o;;;
	if ($arg < -99) {
	    omxplayer_send("\x1b\x5b\x42");
	} elsif ($arg > 99) {
	    omxplayer_send("\x1b\x5b\x41");
	} elsif ($arg < 0) {
	    omxplayer_send("\x1b\x5b\x44");
	} elsif ($arg > 0) {
	    omxplayer_send("\x1b\x5b\x43");
	}
	
    }
    elsif ($cmd eq 'pause') {
	mplayer_send('pause');
	omxplayer_send('p');
    }
    elsif ($cmd eq 'play') {
	if ($sel >= 0) {
	    my $file = $filelist[$sel];
	    if ($file->{TYPE} eq 'f') {
		if (defined $omxplayer_regexp and $file->{NAME} =~ /$omxplayer_regexp/) {
		    omxplayer_start($file->{FULLNAME});
		}
		elsif (defined $mplayer_regexp and $file->{NAME} =~ /$mplayer_regexp/) {
		    mplayer_start($file->{FULLNAME});
		}
		elsif (defined $mplayer_regexp_stream and $file->{NAME} =~ /$mplayer_regexp_stream/) {
		    mplayer_start_stream($file->{FULLNAME});
		}
	    }
	}
	
    }
    elsif ($cmd eq 'stop') {
	stop_all();
    }

}

# exit
print color 'reset';

