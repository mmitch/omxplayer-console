#!/usr/bin/perl -w
use strict;

### use Curses;
use IPC::Open2;
use Term::ANSIColor;
use POSIX qw(mkfifo);

# configuration
my $startdir = '/home/mitch/media';

my $mplayer_regexp = qr/\.(mp3|avi|mkv|ogg)$/;
my $mplayer_fifo = '/tmp/omxplayer-console.mplayer.fifo';
my @mplayer_exec = ('mplayer', '-slave', '-quiet', '-input', "file=${mplayer_fifo}", '%FILE%');
my $mplayer_pid;
# see mplayer slave mode documentation at
# http://www.mplayerhq.hu/DOCS/tech/slave.txt


# global variables
my $win;
my $dir;
my @filelist;
my $sel;
my @dirstack;

				  
sub mplayer_stop()
{
    return unless defined $mplayer_pid;

    mplayer_send('stop');
    kill 15, $mplayer_pid;
    waitpid( $mplayer_pid, 0 );
    $mplayer_pid = undef;
}

sub mplayer_send($)
{
    open  FIFO, '>', $mplayer_fifo or die "can't open fifo `$mplayer_fifo': $!";
    print FIFO "$_[0]\n";
    close FIFO or die "can't close fifo `$mplayer_fifo': $!";

}

sub mplayer_start($)
{
    my $file = shift;

    $mplayer_pid = fork();
    die 'fork() unsuccessful in mplayer_start()' unless defined $mplayer_pid;

    if ($mplayer_pid == 0) {
	# child

	my @exec = @mplayer_exec;
	foreach my $part (@exec) {
	    $part =~ s/%FILE%/$file/g;
	}

	exec(@exec);
	# gone, we are mplayer now
	die 'exec() did not happen in mplayer_start()';
	
    }
}

sub figlet($)
{
    my $text = shift;

    my ($stdin, $stdout);
    my $pid = open2(
	$stdout,
	$stdin,
	'figlet -t -f mini -k'
#	'figlet -t -f small -W'
#	'figlet -t -f small'
	);

    my $ret;

    print $stdin "$text\n";
    close $stdin;

    local $/;
    $ret .= <$stdout>;
    close $stdout;

    waitpid( $pid, 0 );

    return $ret;
}

sub clear_screen()
{
    print `clear`;
}

sub show_dir()
{
    print color 'white';
    print figlet($dir);
    print color 'reset';
}    

sub show_file()
{
    if ($sel >= 0) {
	my $file = $filelist[$sel];
	if ($file->{TYPE} eq 'd') {
	    print color 'bold white';
	} else {
	    print color 'bold blue';
	}
	print figlet($file->{NAME});
	print color 'reset';
    } else {
	print figlet('');
    }
}    

sub show_filelist()
{
    my $pos = 0;
    foreach my $file (@filelist) {
	printf("   %s %s\n",
	      $pos == $sel ? colored('==>', 'bold red') : '   ',
	      colored($file->{DISPLAY}, $file->{TYPE} eq 'f' ? 'bold blue' : 'bold white')
	    );
	
	$pos++;
    }
}

sub read_directory($)
{
    my $dir = shift;
    my @files;

    opendir DIR, $dir or die "can't opendir `$dir': $!";
    while (my $file = readdir(DIR)) {
	next if $file =~ /^\./;
	my $fullname = $dir.'/'.$file;
	if (-f $fullname) {
	    push @files, {
		TYPE => 'f',
		NAME => $file,
		FULLNAME => $fullname,
		DIR => $dir,
		DISPLAY => " $file "
	    }
	} elsif (-d _) {
	    push @files, {
		TYPE => 'd',
		NAME => $file,
		FULLNAME => $fullname,
		DIR => $dir,
		DISPLAY => "[$file]"
	    }
	}
    }
    closedir DIR or die "can't closedir `$dir': $!";

    @files = sort { $a->{TYPE} cmp $b->{TYPE}
		    ||
			$a->{NAME} cmp $b->{NAME} } @files;

    return @files;
}

sub change_directory($)
{
    my $newdir = shift;

    if (substr($newdir, 0, length ($startdir)) eq $startdir) {
	$dir = $newdir;
	@filelist = read_directory($newdir);
	$sel = @filelist ? 0 : -1;
    }
}

sub draw_screen()
{
    clear_screen();
    show_dir();
    show_file();
    show_filelist();
}

#### initialize curses
###$win = new Curses();
###cbreak();
###noecho();

# initialize other stuff
(-p $mplayer_fifo) or mkfifo($mplayer_fifo, 0700) or die "can't mkfifo `$mplayer_fifo': $!";
change_directory($startdir);


while (1) {
    draw_screen();

    my $cmd = <>;
    chomp $cmd;
    if ($cmd eq 'up') {
	if ($sel > 0) {
	    $sel--
	}
    }
    elsif ($cmd eq 'down') {
	if ($sel < @filelist-1) {
	    $sel++
	}
    }
    elsif ($cmd eq 'quit') {
	last;
    }
    elsif ($cmd eq 'left') {
	if (length $dir > length $startdir) {
	    my $newdir = $dir;
	    $newdir =~ s,/[^/]*$,,;
	    change_directory($newdir);
	    if (@dirstack) {
		$sel = pop @dirstack;
		if ($sel >= @filelist) {
		    $sel = @filelist - 1;
		}
	    }
	}
    }
    elsif ($cmd eq 'right') {
	if ($sel >= 0) {
	    my $file = $filelist[$sel];
	    if ($file->{TYPE} eq 'd') {
		push @dirstack, $sel;
		change_directory($file->{FULLNAME});
	    }
	}
    }
    elsif ($cmd eq 'power') {
	`shutdown -h now`;
    }
    elsif ($cmd eq 'play') {
	if ($sel >= 0) {
	    my $file = $filelist[$sel];
	    if ($file->{TYPE} eq 'f') {
		if ($file->{NAME} =~ /$mplayer_regexp/) {
		    mplayer_stop();
		    mplayer_start($file->{FULLNAME});
		}
	    }
	}
	
    }
    elsif ($cmd eq 'stop') {
	mplayer_stop();
    }

}

# exit
print color 'reset';

#### end curses
###echo();
###endwin();
